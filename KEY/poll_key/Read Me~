********************************************************************************
本代码功能： input输入子系统按键驱动

日志      ： input输入子系统与普通输入驱动差别：
             1.input输入子系统：将输入事件抽象为输入驱动和输入事件两个概念;
               输入事件: 包括相对坐标事件，绝对坐标事件，按键事件等，每一种事件
               都是一样的操作，对应一种输入事件，由系统完成。
               输入驱动: 由开发者完成，主要包括硬件属性获取，中断操作，事件上报
               等。
               输入核心: input.c 主要负责注册input驱动，搭建input架构，为input驱
               动提供驱动注册API，及输入驱动的class_device都在/sys/input下，
               input输入子系统每一个输入驱动主设备号都是在input生成(13),次设备
               号由input.c分配。
             2.普通输入驱动: 我不用你的input架构，还是按字符驱动注册,还是在中断里
               上报我自定义的事件，此时应用层要想处理这个输入驱动，就必须了解我这
               个底层驱动怎么写的。
             3.差别： 
              (1) 开发交互方面: input输入子系统是规定的流程，驱动按他这么写，应用
               层就不用了解你底层驱动是怎么写的(公开的规范)，依然可以调用驱动。不
               按这么写，对不起，要么应用层开发者很懂这个驱动(如果是自己写应用层，
               请忽略此)，要么驱动开发就要提供驱动调用文档。
              (2) 编程方面: 其中正常的设备树获取，中断操作都是一样的，不一样的在于
               注册驱动时需要先申请一个input设备结构体
               (eg. input_key_dev.inputdev = input_allocate_device();)，
               然后初始化这个设备结构体成员(输入驱动名，事件类型)，然后调用input层
               的API注册到input设备里，
               (eg. ret = input_register_device(input_key_dev.inputdev);),
               注销函数里，调用input层的API注销，
               (eg.
                 input_unregister_device(input_key_dev.inputdev);
                 input_free_device(input_key_dev.inputdev);
               )
               中断上报里，调用input层上报事件API
               (eg.
                input_report_key(input_key_dev.inputdev, value, 0);
                input_sync(input_key_dev.inputdev);
               )
               调用此API上报时，应用层可以通过getevent查看中断上报的状态。
             
             技巧: 
               

********************************************************************************
